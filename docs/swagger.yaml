basePath: /api/v1
definitions:
  models.APIError:
    properties:
      errorCode:
        type: integer
      errorMessage:
        type: string
    type: object
  schemas.Category:
    properties:
      categoryName:
        example: Category 1
        type: string
      description:
        example: Description 1
        type: string
    type: object
  schemas.CategoryResponse:
    properties:
      active:
        example: false
        type: boolean
      categoryName:
        example: Category 1
        type: string
      description:
        example: Description 1
        type: string
      id:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
    type: object
  schemas.CreditCard:
    properties:
      brand:
        example: Visa
        type: string
      customerID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      cvv:
        example: "847"
        type: string
      mm:
        example: "07"
        type: string
      number:
        example: "4468467578025601"
        type: string
      yyyy:
        example: "2025"
        type: string
    type: object
  schemas.CreditCardResponse:
    properties:
      brand:
        example: Visa
        type: string
      customerID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      cvv:
        example: "847"
        type: string
      id:
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        type: string
      mm:
        example: "07"
        type: string
      number:
        example: "4468467578025601"
        type: string
      yyyy:
        example: "2025"
        type: string
    type: object
  schemas.Customer:
    properties:
      address:
        example: 6597 Westheimer Rd
        type: string
      birthday:
        example: "1990-01-02"
        type: string
      city:
        example: Billings
        type: string
      country:
        example: United States
        type: string
      dni:
        example: "105883636"
        type: string
      email:
        example: ramona.ellis@example.com
        type: string
      name:
        example: Ramona Ellis
        type: string
      password:
        example: addison
        type: string
      phone:
        example: "7097900"
        type: string
      postalCode:
        example: "63104"
        type: string
      userName:
        example: yellowpeacock117
        type: string
    type: object
  schemas.CustomerResponse:
    properties:
      address:
        example: 6597 Westheimer Rd
        type: string
      birthday:
        example: "1990-01-02"
        type: string
      city:
        example: Billings
        type: string
      country:
        example: United States
        type: string
      dni:
        example: "105883636"
        type: string
      email:
        example: ramona.ellis@example.com
        type: string
      id:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      name:
        example: Ramona Ellis
        type: string
      password:
        example: addison
        type: string
      phone:
        example: "7097900"
        type: string
      postalCode:
        example: "63104"
        type: string
      userName:
        example: yellowpeacock117
        type: string
    type: object
  schemas.Login:
    properties:
      customerID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
    type: object
  schemas.LoginResponse:
    properties:
      customerID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      id:
        example: 9cc1g36t-6537-4d10-11fs-771may9224vv
        type: string
    type: object
  schemas.Order:
    properties:
      customerID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      orderDate:
        example: "1990-01-02"
        type: string
      requiredDate:
        example: "1990-01-02"
        type: string
      shipAddress:
        example: 6597 Westheimer Rd
        type: string
      shipCity:
        example: Billings
        type: string
      shipCountry:
        example: United States
        type: string
      shipName:
        example: Servientrega
        type: string
      shipPostalCode:
        example: "63104"
        type: string
      shippedDate:
        example: "1990-01-04"
        type: string
      shipperID:
        example: 9cc1g36t-6537-4d10-11fs-771may9224vv
        type: string
    type: object
  schemas.OrderProduct:
    properties:
      discount:
        example: 2400
        type: number
      orderID:
        example: 9cc1g36t-6537-4d10-11fs-771may9224vv
        type: string
      productID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      quantity:
        example: 5
        type: integer
      unitPrice:
        example: 32400
        type: number
    type: object
  schemas.OrderProductResponse:
    properties:
      discount:
        example: 2400
        type: number
      id:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      orderID:
        example: 9cc1g36t-6537-4d10-11fs-771may9224vv
        type: string
      productID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      quantity:
        example: 5
        type: integer
      unitPrice:
        example: 32400
        type: number
    type: object
  schemas.OrderResponse:
    properties:
      customerID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      id:
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        type: string
      orderDate:
        example: "1990-01-02"
        type: string
      requiredDate:
        example: "1990-01-02"
        type: string
      shipAddress:
        example: 6597 Westheimer Rd
        type: string
      shipCity:
        example: Billings
        type: string
      shipCountry:
        example: United States
        type: string
      shipName:
        example: not null
        type: string
      shipPostalCode:
        example: "63104"
        type: string
      shippedDate:
        example: "1990-01-04"
        type: string
      shipperID:
        example: 9cc1g36t-6537-4d10-11fs-771may9224vv
        type: string
    type: object
  schemas.Payment:
    properties:
      creditCardID:
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        type: string
      orderID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
    type: object
  schemas.PaymentResponse:
    properties:
      creditCardID:
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        type: string
      id:
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        type: string
      orderID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
    type: object
  schemas.Product:
    properties:
      categoryID:
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        type: string
      discontinued:
        example: false
        type: boolean
      productName:
        example: Product 1
        type: string
      quantity:
        example: 10
        type: integer
      quantityPerUnit:
        example: "2"
        type: string
      reorderLevel:
        example: 1
        type: integer
      supplierID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      unitsInStock:
        example: 10
        type: integer
      unitsOnOrder:
        example: 3
        type: integer
    type: object
  schemas.ProductResponse:
    properties:
      categoryID:
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        type: string
      discontinued:
        example: false
        type: boolean
      id:
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        type: string
      productName:
        example: Product 1
        type: string
      quantity:
        example: 10
        type: integer
      quantityPerUnit:
        example: "32400"
        type: string
      reorderLevel:
        example: 1
        type: integer
      supplierID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      unitsInStock:
        example: 10
        type: integer
      unitsOnOrder:
        example: 3
        type: integer
    type: object
  schemas.Shipper:
    properties:
      companyName:
        example: Servientrega
        type: string
      phone:
        example: "6697901"
        type: string
    type: object
  schemas.ShipperResponse:
    properties:
      companyName:
        example: Servientrega
        type: string
      id:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      phone:
        example: "6697901"
        type: string
    type: object
  schemas.Subcategory:
    properties:
      categoryID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      description:
        example: Description about subcategory 1
        type: string
      subCategoryName:
        example: Subcategory 1
        type: string
    type: object
  schemas.SubcategoryResponse:
    properties:
      categoryID:
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        type: string
      description:
        example: Description about subcategory 1
        type: string
      id:
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        type: string
      subCategoryName:
        example: Subcategory 1
        type: string
    type: object
  schemas.Supplier:
    properties:
      address:
        example: 49 Spring St
        type: string
      city:
        example: Billings
        type: string
      companyName:
        example: Arthur Clark
        type: string
      country:
        example: United States
        type: string
      homePage:
        example: arthur.clark.com
        type: string
      phone:
        example: "6475240"
        type: string
      postalCode:
        example: "63104"
        type: string
    type: object
  schemas.SupplierResponse:
    properties:
      address:
        example: 49 Spring St
        type: string
      city:
        example: Billings
        type: string
      companyName:
        example: Arthur Clark
        type: string
      country:
        example: United States
        type: string
      homePage:
        example: arthur.clark.com
        type: string
      id:
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        type: string
      phone:
        example: "6475240"
        type: string
      postalCode:
        example: "63104"
        type: string
    type: object
host: go-rest-api.onrender.com
info:
  contact:
    email: mario.diaz@correounivalle.edu.co
    name: AlexVonEinzbern
    url: https://github.com/AlexVonEinzbern
  description: ecommerce api-rest with basic CRUD operations (Create, Read, Update
    and Delete) products, suppliers, etc. Manage automatically invoice and shipping
    operations
  license:
    name: Apache 2.0
  termsOfService: http://swagger.io/terms/
  title: go-rest-api
  version: "1"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Search all catagories in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.CategoryResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a Category
      parameters:
      - description: Category type
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/schemas.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CategoryResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Category
      tags:
      - Categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by id
      parameters:
      - description: Category ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete Category by id
      tags:
      - Categories
    patch:
      consumes:
      - application/json
      description: Update a category by id
      parameters:
      - description: Category ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.CategoryResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update Category by id
      tags:
      - Categories
  /categories/active:
    get:
      consumes:
      - application/json
      description: Search active categories in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.CategoryResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all active Categories
      tags:
      - Categories
  /creditcard:
    get:
      consumes:
      - application/json
      description: Search all credit cards in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.CreditCardResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all SearchCreditCards
      tags:
      - CreditCards
    post:
      consumes:
      - application/json
      description: Create a CreditCard
      parameters:
      - description: CreditCard a subcategory
        in: body
        name: creditcard
        required: true
        schema:
          $ref: '#/definitions/schemas.CreditCard'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CreditCardResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create creditcard
      tags:
      - CreditCards
  /creditcard/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a credit card by id
      parameters:
      - description: CreditCard ID
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete CreditCard by id
      tags:
      - CreditCards
    get:
      consumes:
      - application/json
      description: Search CreditCard by id in the DataBase
      parameters:
      - description: CreditCard ID
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.CreditCardResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search CreditCard by id
      tags:
      - CreditCards
    patch:
      consumes:
      - application/json
      description: Update a credit card by id
      parameters:
      - description: CreditCard ID
        example: 5cc1f36f-1287-4c88-63fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.CreditCardResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update CreditCard by id
      tags:
      - CreditCards
  /customers:
    get:
      consumes:
      - application/json
      description: Search all customers in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.CustomerResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create a Customer
      parameters:
      - description: Customer type
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/schemas.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.CustomerResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer by id
      parameters:
      - description: Customer ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete Customer by id
      tags:
      - Customers
    get:
      consumes:
      - application/json
      description: Search Customer by id in the DataBase
      parameters:
      - description: Customer ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.CustomerResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search Customer by id
      tags:
      - Customers
    patch:
      consumes:
      - application/json
      description: Update a customer by id
      parameters:
      - description: Customer ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.CustomerResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update Customer by id
      tags:
      - Customers
  /login:
    post:
      consumes:
      - application/json
      description: Create a Login
      parameters:
      - description: Login type
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/schemas.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.LoginResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Login
      tags:
      - Login
  /login/{id}:
    get:
      consumes:
      - application/json
      description: Search Login by customer id in the DataBase
      parameters:
      - description: Login ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.LoginResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search Login by Customer id
      tags:
      - Login
  /login/date/{date}:
    get:
      consumes:
      - application/json
      description: Search Login by date in the DataBase
      parameters:
      - description: Login date
        example: "2006-01-02"
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.LoginResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search Login by Date
      tags:
      - Login
  /orderproducts:
    get:
      consumes:
      - application/json
      description: Search all orderproducts in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.OrderProductResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all OrderProducts
      tags:
      - OrderProducts
    post:
      consumes:
      - application/json
      description: Create a OrderProduct
      parameters:
      - description: OrderProduct type
        in: body
        name: orderproduct
        required: true
        schema:
          $ref: '#/definitions/schemas.OrderProduct'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.OrderProductResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create OrderProduct
      tags:
      - OrderProducts
  /orderproducts/{id}:
    get:
      consumes:
      - application/json
      description: Search OrderProduct by id in the DataBase
      parameters:
      - description: OrderProduct ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.OrderProductResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search OrderProduct by id
      tags:
      - OrderProducts
  /orders:
    get:
      consumes:
      - application/json
      description: Search all orders in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.OrderResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a Order
      parameters:
      - description: Order type
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/schemas.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.OrderResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Order
      tags:
      - Orders
  /payments:
    post:
      consumes:
      - application/json
      description: Create a Payment
      parameters:
      - description: Payment type
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/schemas.Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PaymentResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Payment
      tags:
      - Payments
  /payments/{id}:
    get:
      consumes:
      - application/json
      description: Search Payment by id in the DataBase
      parameters:
      - description: Payment ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.PaymentResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search Payment by Customer id
      tags:
      - Payments
  /payments/date/{date}:
    get:
      consumes:
      - application/json
      description: Search Payments by date in the DataBase
      parameters:
      - description: Payment date
        example: "2006-01-02"
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.PaymentResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search Payments by Date
      tags:
      - Payments
  /products:
    get:
      consumes:
      - application/json
      description: Search all products in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.ProductResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a Product
      parameters:
      - description: Product type
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/schemas.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ProductResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by id
      parameters:
      - description: Product ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634x
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete a Product by id
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update a product by id
      parameters:
      - description: Product ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634x
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.ProductResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update Product by id
      tags:
      - Products
  /products/active:
    get:
      consumes:
      - application/json
      description: Search all active products in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.ProductResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all active Products
      tags:
      - Products
  /shippers:
    get:
      consumes:
      - application/json
      description: Search all shippers in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.ShipperResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Shippers
      tags:
      - Shippers
    post:
      consumes:
      - application/json
      description: Create a Shipper
      parameters:
      - description: Shipper type
        in: body
        name: shipper
        required: true
        schema:
          $ref: '#/definitions/schemas.Shipper'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.ShipperResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Shipper
      tags:
      - Shippers
  /shippers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a shipper by id
      parameters:
      - description: Shipper ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete Shipper by id
      tags:
      - Shippers
    patch:
      consumes:
      - application/json
      description: Update a shipper by id
      parameters:
      - description: Shipper ID
        example: 5dd1f36f-1627-4c88-98fb-601feb9634be
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.ShipperResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update Shipper by id
      tags:
      - Shippers
  /subcategories:
    get:
      consumes:
      - application/json
      description: Search all subcatagories in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SubcategoryResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Subcategories
      tags:
      - Subcategories
    post:
      consumes:
      - application/json
      description: Create a Subcategory
      parameters:
      - description: Create a subcategory
        in: body
        name: subcategory
        required: true
        schema:
          $ref: '#/definitions/schemas.Subcategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SubcategoryResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Subcategory
      tags:
      - Subcategories
  /subcategories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a subcategory by id
      parameters:
      - description: Subcategory ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete a Subcategory by id
      tags:
      - Subcategories
    patch:
      consumes:
      - application/json
      description: Update a subcategory by id
      parameters:
      - description: Subcategory ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634xx
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.SubcategoryResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update Subcategory by id
      tags:
      - Subcategories
  /subcategories/active:
    get:
      consumes:
      - application/json
      description: Search all active categories in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SubcategoryResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all active Subcategories
      tags:
      - Subcategories
  /suppliers:
    get:
      consumes:
      - application/json
      description: Search all suppliers in the DataBase
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schemas.SupplierResponse'
            type: array
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Search all Suppliers
      tags:
      - Suppliers
    post:
      consumes:
      - application/json
      description: Create a Supplier
      parameters:
      - description: Supplier type
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/schemas.Supplier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.SupplierResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create Supplier
      tags:
      - Suppliers
  /suppliers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a supplier by id
      parameters:
      - description: Supplier ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634x
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Delete Supplier by id
      tags:
      - Suppliers
    patch:
      consumes:
      - application/json
      description: Update a supplier by id
      parameters:
      - description: Supplier ID
        example: 2ld1f12f-2227-8s08-18cc-222fdb9634x
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/schemas.SupplierResponse'
        "404":
          description: Can not find objects
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Update Supplier by id
      tags:
      - Suppliers
swagger: "2.0"
